var _ = require('underscore'),
	Pieces = {},
	hitablePieces = function(piece, board) {
		var ret = [],
			checkPositions = piece.checkPositions();
		checkPositions.forEach(function(position){
			var at = false,
				dict = _.pick(position, 'x', 'y');
				
			if (position.type == 'point') {
				at = board.at(position.x, position.y);
				if (at === ' ') {
					at = false;
				}
			} else if (position.type == 'line') {
				do {
					dict = position.func(dict.x, dict.y);
					at = board.at(dict.x, dict.y);
				} while (at === ' '); // this ensures that you loop until you hit a piece or the edge of the board.
			}
			if (at !== false) {
				ret.push(at);
			}
		});
		return ret;
	},
	getColor = function(character) {
		return (character.charCodeAt(0) < 91) ? 'white' : 'black';
	},
	getTargetKing = function(color) {
		return (color === 'black') ? 'K' : 'k';
	},
	curry = function(fn) {
		var args = _.toArray(arguments).slice(1),
			f = function() {
				return fn.apply({}, args);
			};
		return f;
	},
	hitKing = function(piece, targetKing) {
		return (piece.hitables().indexOf(targetKing) !== -1);
	},
	lineFunc = function(dx, dy) {
		var dx = dx,
			dy = dy;
		var f = function(x, y) {
			return {'x': x + dx, 'y': y + dy};
		};
		return f;
	};

Pieces.getColor = getColor;

Pieces.Pawn = function(character, board, position) {
	var that = {},
		color = getColor(character),
		targetKing = getTargetKing(color),
		position = position;
	
	that.checkPositions = function() {
		var yd = 1,
			checkPositions = [];
			
		if (color == 'black') {
			yd = -1;
		}
		
		checkPositions.push({'type': 'point', 'x': position.x - 1, 'y': position.y + yd});
		checkPositions.push({'type': 'point', 'x': position.x + 1, 'y': position.y + yd});
		
		return checkPositions;
	};
	
	that.color = color;
	that.hitables = curry(hitablePieces, that, board);
	that.hitKing = curry(hitKing, that, targetKing);
	
	return that;
};

Pieces.Knight = function(character, board, position) {
	var that = {},
		color = getColor(character),
		targetKing = getTargetKing(color),
		position = position;
	
	that.checkPositions = function() {
		var checkPositions = [];
		
		checkPositions.push({'type': 'point', 'x': position.x - 2, 'y': position.y - 1});
		checkPositions.push({'type': 'point', 'x': position.x + 2, 'y': position.y - 1});
		checkPositions.push({'type': 'point', 'x': position.x - 2, 'y': position.y + 1});
		checkPositions.push({'type': 'point', 'x': position.x + 2, 'y': position.y + 1});
		checkPositions.push({'type': 'point', 'x': position.x - 1, 'y': position.y - 2});
		checkPositions.push({'type': 'point', 'x': position.x + 1, 'y': position.y - 2});
		checkPositions.push({'type': 'point', 'x': position.x - 1, 'y': position.y + 2});
		checkPositions.push({'type': 'point', 'x': position.x + 1, 'y': position.y + 2});
		
		return checkPositions;
	};
	
	that.color = color;
	that.hitables = curry(hitablePieces, that, board);
	that.hitKing = curry(hitKing, that, targetKing);
	
	return that;
};

Pieces.Rook = function(character, board, position) {
	var that = {},
		color = getColor(character),
		targetKing = getTargetKing(color),
		position = position;
	
	that.checkPositions = function() {
		var checkPositions = [];
		
		checkPositions.push({'type': 'line', 'x': position.x, 'y': position.y, 'func': lineFunc(1, 0)});
		checkPositions.push({'type': 'line', 'x': position.x, 'y': position.y, 'func': lineFunc(-1, 0)});
		checkPositions.push({'type': 'line', 'x': position.x, 'y': position.y, 'func': lineFunc(0, 1)});
		checkPositions.push({'type': 'line', 'x': position.x, 'y': position.y, 'func': lineFunc(0, -1)});
		
		return checkPositions;
	};
	
	that.color = color;
	that.hitables = curry(hitablePieces, that, board);
	that.hitKing = curry(hitKing, that, targetKing);
	
	return that;
};

Pieces.Bishop = function(character, board, position) {
	var that = {},
		color = getColor(character),
		targetKing = getTargetKing(color),
		position = position;
	
	that.checkPositions = function() {
		var checkPositions = [];
		
		checkPositions.push({'type': 'line', 'x': position.x, 'y': position.y, 'func': lineFunc(1, 1)});
		checkPositions.push({'type': 'line', 'x': position.x, 'y': position.y, 'func': lineFunc(1, -1)});
		checkPositions.push({'type': 'line', 'x': position.x, 'y': position.y, 'func': lineFunc(-1, 1)});
		checkPositions.push({'type': 'line', 'x': position.x, 'y': position.y, 'func': lineFunc(-1, -1)});
		
		return checkPositions;
	};
	
	that.color = color;
	that.hitables = curry(hitablePieces, that, board);
	that.hitKing = curry(hitKing, that, targetKing);
	
	return that;
};

Pieces.Queen = function(character, board, position) {
	var that = {},
		color = getColor(character),
		targetKing = getTargetKing(color),
		position = position;
	
	that.checkPositions = function() {
		var checkPositions = [];
		
		// Rook moves
		checkPositions.push({'type': 'line', 'x': position.x, 'y': position.y, 'func': lineFunc(1, 0)});
		checkPositions.push({'type': 'line', 'x': position.x, 'y': position.y, 'func': lineFunc(-1, 0)});
		checkPositions.push({'type': 'line', 'x': position.x, 'y': position.y, 'func': lineFunc(0, 1)});
		checkPositions.push({'type': 'line', 'x': position.x, 'y': position.y, 'func': lineFunc(0, -1)});
		
		// Bishop Moves
		checkPositions.push({'type': 'line', 'x': position.x, 'y': position.y, 'func': lineFunc(1, 1)});
		checkPositions.push({'type': 'line', 'x': position.x, 'y': position.y, 'func': lineFunc(1, -1)});
		checkPositions.push({'type': 'line', 'x': position.x, 'y': position.y, 'func': lineFunc(-1, 1)});
		checkPositions.push({'type': 'line', 'x': position.x, 'y': position.y, 'func': lineFunc(-1, -1)});
		
		return checkPositions;
	};
	
	that.color = color;
	that.hitables = curry(hitablePieces, that, board);
	that.hitKing = curry(hitKing, that, targetKing);
	
	return that;
};

Pieces.King = function(character, board, position) {
	var that = {},
		color = getColor(character),
		targetKing = getTargetKing(color),
		position = position;
	
	that.checkPositions = function() {
		var checkPositions = [];
		
		checkPositions.push({'type': 'point', 'x': position.x - 1, 'y': position.y - 1});
		checkPositions.push({'type': 'point', 'x': position.x,     'y': position.y - 1});
		checkPositions.push({'type': 'point', 'x': position.x + 1, 'y': position.y - 1});
		
		checkPositions.push({'type': 'point', 'x': position.x - 1, 'y': position.y});
		checkPositions.push({'type': 'point', 'x': position.x + 1, 'y': position.y});
		
		checkPositions.push({'type': 'point', 'x': position.x - 1, 'y': position.y + 1});
		checkPositions.push({'type': 'point', 'x': position.x,     'y': position.y + 1});
		checkPositions.push({'type': 'point', 'x': position.x + 1, 'y': position.y + 1});
		
		return checkPositions;
	};
	
	that.color = color;
	that.hitables = curry(hitablePieces, that, board);
	that.hitKing = curry(hitKing, that, targetKing);
	
	return that;
};

Pieces.dict = {
	'p': Pieces.Pawn,
	'r': Pieces.Rook,
	'b': Pieces.Bishop,
	'n': Pieces.Knight,
	'q': Pieces.Queen,
	'k': Pieces.King,
	'P': Pieces.Pawn,
	'R': Pieces.Rook,
	'B': Pieces.Bishop,
	'N': Pieces.Knight,
	'Q': Pieces.Queen,
	'K': Pieces.King
};

module.exports = Pieces;
